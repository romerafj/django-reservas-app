"""
Django settings for vuelos project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import dj_database_url
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


SCHEDULER_AUTOSTART = True


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'tu_clave_secreta_para_desarrollo_local_solamente_NUNCA_USAR_EN_PRODUCCION')
# La parte 'tu_clave_secreta_para_desarrollo_local_solamente_NUNCA_USAR_EN_PRODUCCION' es un fallback para desarrollo local.
# En Render, usaremos una variable de entorno REAL para SECRET_KEY.

# SECURITY WARNING: don't run with debug turned on in production!
# Leerá de una variable de entorno llamada 'DEBUG'. Si no existe o es 'False', '0', etc., DEBUG será False.
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 't')

# Define ALLOWED_HOSTS
# Esto leerá de una variable de entorno llamada 'ALLOWED_HOSTS'.
# Si no existe, será una lista vacía.
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',')
# OPCIONAL: Si quieres que tu proyecto siga funcionando en localhost durante el desarrollo
# cuando DEBUG sea True, puedes añadir esto:
if DEBUG:
    ALLOWED_HOSTS.append('127.0.0.1')
    ALLOWED_HOSTS.append('localhost')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages', # Asegúrate de que esta línea esté presente
    'django.contrib.staticfiles',
    'reservas', 
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Añadido WhiteNoiseMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cn.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates', BASE_DIR / 'cn' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug', # No estaba, pero es común en dev
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cn.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        # Render inyectará DATABASE_URL para PostgreSQL.
        # Si no se encuentra DATABASE_URL (ej. en desarrollo local),
        # usaremos la configuración MySQL por defecto.
        default=os.environ.get('DATABASE_URL', 'mysql://app_vuelos:Aa918865512@127.0.0.1:3306/reservas_bd?charset=utf8mb4'),
        conn_max_age=600 # Opcional: Ayuda a evitar conexiones "zombie" con la base de datos
    )
}

# OPCIONAL PERO RECOMENDADO: Asegurarte de que la opción 'charset' se pase correctamente
# Esto es un poco más avanzado, pero asegura que MySQL siga usando utf8mb4 si es tu default
# No es estrictamente necesario para que funcione, pero si tienes problemas de caracteres, puede ser útil.
if 'mysql' in DATABASES['default']['ENGINE']:
    DATABASES['default']['OPTIONS'] = {'charset': 'utf8mb4'}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # ¡AÑADIDO! Donde se recolectarán los estáticos en producción

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/reservas/'   # Redirige al usuario a la lista de reservas después del login exitoso
LOGOUT_REDIRECT_URL = '/accounts/login/' # Redirige al usuario a la página de login después del logout


# Configuración de Correo Electrónico
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp-relay.brevo.com'   # Servidor SMTP de Brevo
EMAIL_PORT = 587    # Puerto SMTP de Brevo
# ¡IMPORTANTE! Las credenciales de correo deben ir en variables de entorno por seguridad.
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'tu_usuario_brevo_local') # Leer de variable de entorno
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'tu_password_brevo_local') # Leer de variable de entorno
EMAIL_USE_TLS = True    # Usar TLS es recomendado
DEFAULT_FROM_EMAIL = 'romerafj@gmail.com' # Si esta dirección es fija, puede quedarse así. Si no, también variable de entorno.